

//
//apply plugin:'com.android.application'
//apply plugin:'kotlin-android'
//apply plugin:'kotlin-android-extensions'



buildscript {
    repositories {
        maven {
            url uri('../repo')
        }
    }
    dependencies {
        classpath 'com.plugin.plugin:plugin:0.0.1'
    }
}

//buildscript {
//    dependencies {
//        classpath fileTree(dir: 'libs', include: '*.jar')
//    }
//}

plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-android-extensions'
//    id 'plugin'
   // id "com.plugin.MyPlugin"
}

apply plugin:"plugin"

//apply plugin:"myplugin"
//apply plugin:"groovytestlib"


//apply plugin:"myplugin"

class HelloExtensioin {
    Boolean enable = true
    String text = ""
}



class HelloPlugin implements Plugin<Project> {

    @Override
    void apply(org.gradle.api.Project project) {
        project.extensions.create("hello", HelloExtensioin)
        project.task("welcom") {
            doLast {
                HelloExtensioin ext = project.extensions.hello;
                println ext.enable ? "Hello ${ext.text}!" : "HelloPlugin is disabled."
            }
        }
    }
}

apply plugin:HelloPlugin

hello {
    enable = true
    text = "Gradle"
}

task distribution  {
    println "We build the zip with version=$version"
}

task release(dependsOn: 'distribution')  {
    println 'We release now'
}

release.configure {}

gradle.taskGraph.whenReady {taskGraph ->
    if (taskGraph.hasTask(release)) {
        version = '1.0'
    } else {
        version = '1.0-SNAPSHOT'
    }
}



android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "com.example.helloworld"
        minSdkVersion 28
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    useLibrary 'android.test.runner'

    useLibrary 'android.test.base'
    useLibrary 'android.test.mock'

}

dependencies {

    //implementation fileTree(include: '*.jar',  dir: 'libs')
    implementation fileTree(include: '*.aar',  dir: 'libs')
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.6.0'
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'

    implementation 'com.squareup.okhttp3:okhttp:4.9.0'
    implementation'org.nanohttpd:nanohttpd:2.2.0'

    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.1.1'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.1.1'
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:2.0.4'

    testImplementation 'junit:junit:4.+'
//    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
//    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    //下面的依赖都是为了进行instrumentation 测试需要依赖的
    // Core library
    androidTestImplementation 'androidx.test:core:1.0.0'

    // AndroidJUnitRunner and JUnit Rules
    androidTestImplementation 'androidx.test:runner:1.1.0'
    androidTestImplementation 'androidx.test:rules:1.1.0'

    // Assertions
    androidTestImplementation 'androidx.test.ext:junit:1.0.0'
    androidTestImplementation 'androidx.test.ext:truth:1.0.0'
    androidTestImplementation 'com.google.truth:truth:0.42'

    // Espresso dependencies
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-intents:3.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-accessibility:3.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-web:3.1.0'
    androidTestImplementation 'androidx.test.espresso.idling:idling-concurrent:3.1.0'

    // The following Espresso dependency can be either "implementation"
    // or "androidTestImplementation", depending on whether you want the
    // dependency to appear on your APK's compile classpath or the test APK
    // classpath.
    androidTestImplementation 'androidx.test.espresso:espresso-idling-resource:3.1.0'

    // Optional -- Hamcrest library
    androidTestImplementation 'org.hamcrest:hamcrest-library:1.3'

    // Optional -- UI testing with UI Automator
    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'



}

println "configuration: app_module#build.gradle 被执行！"

afterEvaluate {
    if(it.hasProperty('group')) {
        println('has group')
        it.task('B') {
            doLast {
                println 'excute B'
            }
        }
    } else {
        println 'do not have group'
    }
}

class Example {
    static void main(String[] args) {
        // Using a simple println statement to print output to the console
        println('Hello World');
    }
}
def name ='qinhou'

def add(a, b) {

}

apply from:'../config.gradle'
ext {
    userName = "luo xiu yun"
}

//println "config ext userName = ${project("../config.gradle").ext.userName}"